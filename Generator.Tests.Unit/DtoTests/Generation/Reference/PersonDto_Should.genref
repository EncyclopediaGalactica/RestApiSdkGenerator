namespace Test.Generation.Dto.Project;

using System.Diagnostics.CodeAnalysis;
using FluentAssertions;
using Xunit;

using Test.Generation.Dto.Project;

/// <summary>
///     Test cases for PersonDto object.
///     <remarks>
///         Time of generation: 04/22/2023 14:33:39 #TEST_IGNORE
///     </remarks>
/// </summary>
[ExcludeFromCodeCoverage]
[SuppressMessage("ReSharper", "InconsistentNaming")]
public class PersonDto_Should
{
    [Fact]
    public void NotChange_Id_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            Id = 200L 
        };
    
        // Assert
        personDto.Id.Should().Be(200L);
    }

    [Fact]
    public void NotChange_Name_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            Name = "string value" 
        };
    
        // Assert
        personDto.Name.Should().Be("string value");
    }

    [Fact]
    public void NotChange_Address_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            Address = "string value" 
        };
    
        // Assert
        personDto.Address.Should().Be("string value");
    }

    [Fact]
    public void NotChange_HouseNumber_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            HouseNumber = 100 
        };
    
        // Assert
        personDto.HouseNumber.Should().Be(100);
    }

    [Fact]
    public void NotChange_SocialSecurityNumber_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            SocialSecurityNumber = 200L 
        };
    
        // Assert
        personDto.SocialSecurityNumber.Should().Be(200L);
    }

    [Fact]
    public void NotChange_FloatType_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            FloatType = 2.8f 
        };
    
        // Assert
        personDto.FloatType.Should().Be(2.8f);
    }

    [Fact]
    public void NotChange_DoubleType_Value() {
        
        // Arrange && Act
        PersonDto personDto = new ()
        {
            DoubleType = 0.3e2 
        };
    
        // Assert
        personDto.DoubleType.Should().Be(0.3e2);
    }
}